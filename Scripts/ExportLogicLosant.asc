PROCEDURE global LOSANT_FLOW {
    GET_ENDPOINT iType: ("application") operation: ("get_applications") values: ({selectedAppID}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
    SETL items: (response SUB "items")
    SETL appMap: (map())

    FOR i from:0 to:((items.length)-1) {
        SET appMap[items[i] SUB "name"]: (items[i] SUB "applicationId")
    }
    CC "AdoScript" LISTBOX  entries: (mapKeysList(appMap))
                            toksep:"~"
                            title:"Select Application"
                            oktext:"Select"
                            boxtext:"Choose application"
                            selection:"Second Entry"
    IF (endbutton = "ok") {
        SETL selectedAppID: (appMap SUB selection)
        #CC "AdoScript" INFOBOX ("Export successfully completed")
    } ELSE {
        EXIT
    }

    CREATE_WORKFLOW_REQUEST workflow: workflow
    GET_ENDPOINT iType: ("workflow") operation: ("create_workflow") values: ({selectedAppID}) endpoint: endpoint method: method
    MAKE_HTTP_REQUEST path: (endpoint) reqbody: (lam_toJson(workflow)) reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
}

PROCEDURE global CREATE_WORKFLOW_REQUEST workflow: reference {
    SET workflowName:(modelname)
    SET workflow:({
        "description": "",
        "name": workflowName,
        "nodes": {},
        "triggers": {}
    })
    
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelLogicID) classname:("node")
    FOR obj in:(objids) {
        SET class:(map())
        CLASS_PSM specs:(specifications) objID:(VAL obj) class:class
        IF (NOT class.empty) {
            # Get node's information
            SET triggers:({})
            SET triggers:(workflow["triggers"])
            SET nodes:(workflow["nodes"])
            SET node:(class["config"])
            SET meta:(node["meta"])
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("name")
            SET meta["label"]:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("description")
            SET meta["description"]:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:("Position")
            LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
            SET meta["x"]:((CMS x)*40)
            SET meta["y"]:((CMS y)*50)

            CC "Core" GET_INTERREF objid:(VAL obj) attrname:("service") index:0   #prendo interref della logica
            IF (type(tmodelid)!= "undefined") {   # se c'è interref
                CC "Core" GET_CONNECTORS objid:(tobjid) in  # sto su service, prendo i suoi connettori di ingresso
                CC "AdoScript" INFOBOX ("toobjid" + STR tobjid)
                FOR connid in:(objids) {  #per ogni connettore 
                    CC "Core" GET_CLASS_ID relation objid:(VAL connid) #id del conenttore di hasservice
                    CC "Core" GET_CLASS_NAME classid:(classid)
                    CC "AdoScript" INFOBOX ("prendo la prima relazione che lo lega: " + classname)

                    IF (classname = "hasService") {


                        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)   #prendo il connettore di hasservice
                        CC "AdoScript" INFOBOX ("service è connesso all'oggeto con id: " + STR fromobjid)

                        CC "Core" GET_CLASS_ID relation objid:(fromobjid)
                        CC "Core" GET_CLASS_NAME classid:(classid)
                         CC "AdoScript" INFOBOX ("device" + classname)
                        IF ( classname != "Device Operation" ) {
                            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(fromobjid)
                            
                        }
                        CC "Core" GET_INTERREF objid:(fromobjid) attrname:("structure") index:0
                        GET_RECORD_VALUE objectid: (fromobjid) attribute: ("losant_object_id") val: idKeyDevice
                         CC "AdoScript" INFOBOX ("idkey" + idKeyDevice)
                        SET node["key"]:(idKeyDevice)
                        CC "AdoScript" INFOBOX ("node" + STR node)
                    }
                }
            }
                 
            # Get node's out connectors
            IF (type(class["output"]) = "array") {
                SET outputs:(map())
                FOR i from:0 to:(class["output"].length-1) {
                    SET outputs[class["output"][i]]:({}) 
                }
                CC "Core" GET_CONNECTORS objid:(VAL obj) out
                SET connids:(objids)
                FOR connid in:(connids) {
                    CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
                    CC "Core" GET_ATTR_VAL objid:(VAL connid) attrname:("psm_type")
                    SET conntype:(val)
                    SET outputClass:("")
                    CLASS_PSM specs:(specifications) objID:(toobjid) class:outputClass
                    IF (conntype != "" AND NOT outputClass.empty) {
                        SET output:(outputs[conntype])
                        SET n:(aappend(output, STR toobjid))
                        SET outputs[conntype]:(output)
                    }
                }
                SET outputIds:(node["outputIds"])
                SET outKeys:(mapKeysArray(outputs))
                FOR i from:0 to:(outKeys.length-1) {
                    SET n:(aappend(outputIds, outputs[outKeys[i]]))
                }
                SET node["outputIds"]:(outputIds)
            }
            IF (node["meta"]["category"] = "trigger") {
                SET meta["uiId"]:(obj)
                SET node["meta"]:(meta)
                SET n:(aappend(triggers, node))
                SET workflow["triggers"]:(triggers)
            } ELSE {
                SET node["id"]:(obj)
                SET node["meta"]:(meta)
                SET n:(aappend(nodes, node))
                SET workflow["nodes"]:(nodes)
            }
        }
    }
}

