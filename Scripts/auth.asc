# Questo script contiene le procedure per la gestione dell'autenticazione.

SETG url: ("")
SETG header:({
    "Content-Type": "application/json"
})
SETL modelid: (-1)

# Procedura che serve a controllare se l'utente è loggato nella piattaforma cloud. Viene preso in input l'id del modello
# su cui si vuole eseguire le operazioni e viene letto l'attributo auth.
# Se auth restituisce una stringa vuota verrà chiesto all'utente di eseguire l'autenticazione, se invece auth contiene il token
# possono verificarsi due condizioni:
#   1) Il token è valido e il server ritorna come messaggio di risposta 200, in questo caso non bisogna fare nulla
#   2) Il token non è più valido e il server ritorna come messaggio di risposta l'errore 401, in questo caso è necessario eseguire
#      nuovamente l'autenticazione
#
# Dopo aver effettuato il controllo e l'autenticazione, il token verrà salvato nella variabile "token" e infine inserito
# nell'header "Authorization" per essere utilizzato nelle richieste GET e POST.
# La procedura ritorna il valore errcode 0 quando l'operazione va a buon fine, -1 in caso di errore.
PROCEDURE global GET_LOGGED_USER
    modelid: integer # ID del modello da cui si vuole controllare il token di autenticazione
    respstat: reference # Risposta server
    errcode: reference # Codice errore di ritorno
{
    SETL errcode: (0)
    SETL modelid: (modelid)
   SETL token: ("")

    IF (token =  "") {
        IF (selectedPlatform = "ThingsBoard") {
            	CC "AdoScript" EDITBOX title:"Platform's API token" text:"API token"
    IF (endbutton != "ok") {
        EXIT
    }
	SET token:(text)
    SETG header["Authorization"]: ("Bearer " + token)

    CC "AdoScript" EDITFIELD title:"Platform's url" caption:"url:" text:"https://demo.thingsboard.io"
	IF (ecode != 0) {
        EXIT
    }
    SET url: (text)

    IF(url = "") {
        SETL errcode: (-1)
        EXIT
    }
            MAKE_HTTP_REQUEST path: ("api/auth/user") reqbody: ("") reqHeader: (header) method: ("GET") mapRespBody: mapRespBody respstat: respstat
            
        } 
        
        ELSIF (selectedPlatform = "Losant") {

     CC "AdoScript" EDITBOX title:"Platform's API ID token"  text:"64161a2c6e1e7b18de72a214"
		IF (endbutton != "ok") {
        EXIT
    }
	SET token_ID:(text)
    SETL applicationId:(token_ID)

    CC "AdoScript" EDITBOX title:"Platform's API token" text:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NDE2MWEyYzZlMWU3YjE4ZGU3MmEyMTQiLCJzdWJ0eXBlIjoiYXBpVG9rZW4iLCJzY29wZSI6WyJhbGwuVXNlciJdLCJpYXQiOjE2NzkxNzAwOTIsImlzcyI6ImFwaS5nZXRzdHJ1Y3R1cmUuaW8ifQ.MrRla5KGjaeVjAAaT0Htf6DScyBn8imVrZE7pgmxFSI"
	IF (endbutton != "ok") {
        EXIT
    }

    SET token_losant:(text) 
    SETG header["Authorization"]: ("Bearer " + token_losant)
   # CC "AdoScript" EDITFIELD title:"Platform's url" caption:"url:" text:"https://api.losant.com"

	#IF (ecode != 0) {
     #   EXIT
    #}
    SET url: ("https://api.losant.com")

    #IF(url = "") {
     #   SETL errcode: (-1)
     #   EXIT
    #}

    MAKE_HTTP_REQUEST path: ("me") reqbody: ("") reqHeader: (header) method: ("GET") mapRespBody: mapRespBody respstat: respstat

    IF (respstat = 401) {
        CC "AdoScript" ERRORBOX ("Please log in again") title:("Session expired") ok
        AUTH token: token
    } ELSIF ( respstat != 200 AND respstat != 201 ) {
        CC "AdoScript" INFOBOX ("User not logged on platform") title:("Authentication failed")
        AUTH token: token
    } ELSE {
        SET token:(token_losant)
    }
    SETG header["Authorization"]: ("Bearer " + token) # Update header token
}

}


}
# Procedura che permette all'utente di eseguire l'autenticazione in un server.
# Viene chiesto all'utente di inserire i dati di accesso (mail e password) tramite due EDITFIELD, i dati verranno successivamente inseriti
# dentro una map che sarà convertita in JSON e passata al server per controllare che siano corretti
# Nel caso in cui i dati inseriti sono corretti il server restituisce come risposta il codice 200 e il token di autenticazione, altrimenti 
# ritorna l'errore 401. 
# Quando l'autenticazione va a buon fine il token ricevuto verrà salvato all'interno dell'attributo "auth" del modello, in modo che può
# essere riutilizzato fino alla scadenza. 
PROCEDURE global AUTH
    token: reference # Ritorna il token di autenticazione generato dal server remoto
{
    SET req: (map())
    CC "AdoScript" EDITFIELD caption:("Enter mail") title:("Login: Mail")

    IF (selectedPlatform = "ThingsBoard") {
        SET req["username"]: (text)
        SETL loginPath: ("api/auth/login") 
    } ELSIF (selectedPlatform = "Losant") {
        SET req["email"]: (text)
        SETL loginPath: ("auth/user") 
    }
    CC "AdoScript" EDITFIELD caption:("Enter password") title:("Login: Password")
    SET req["password"]: (text)

    MAKE_HTTP_REQUEST path: (loginPath) reqbody: (STR req) reqHeader: (header) method: ("POST") mapRespBody: response respstat: respstat

    IF (respstat = 401) {
        CC "AdoScript" ERRORBOX ("Authentication failed!\n\nInvalid username or password.") title:("Authentication failed") ok
        EXIT
    } ELSE {
        SET token: (response SUB "token")
        # Save token into auth attribute
        CC "Core" GET_CLASS_ID classname:("__ModelTypeMetaData__")
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("auth")
        CC "Core" SET_ATTR_VAL objid:(modelid) attrid:(attrid) val:(token)
    }
}
