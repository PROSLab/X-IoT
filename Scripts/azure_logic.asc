
# Export all the "blue objects" (pubsub_out, datastream_out, storage, request_out, notification) in a json file.
# this creates n .json files as n "blue objects" present in this model

# todo rivedere questo : each file should be imported in a new empty Logic application (in portal.azure.com obviously...)

# The rules defined in <yourapplication>.azureiotcentral.com have some actions linked to the LogicApp in portal.azure.com 
# each rule has its own application which define the actions to be executed when the rule is triggered (!!!!!!!!)

#AZURE_LOGIC path:("C:\\evvai")

PROCEDURE global AZURE_LOGIC
path:string
{
    # todo accomedare un po di roba
    #CC "AdoScript" EDITFIELD title:"Azure's Logic Application name" caption:"Enter Azure's Logic Application name:" text:"azurelogicapplication"
    #IF (ecode != 0) {# if "ok" button is not clicked, something went wrong
    #    EXIT
    #}
    #SET applicationName:(text)
    SET newLogicAppName:("uploadiamotutto")

    #SET path:(path + "\\" + applicationName)
    #CC "AdoScript" DIR_CREATE path:(path)

    #CC "AdoScript" EDITFIELD title:"Azure's Logic main resource group name" caption:"Enter Azure's Logic main resource group name:" text:"resourcegroupname"
    #IF (ecode != 0) {# if "ok" button is not clicked, something went wrong
    #    EXIT
    #}
    #SET mainResourceGroupName:(text) todo accomedare
    SET mainResourceGroupName:("nuovoResourceGroup")

    #CC "AdoScript" EDITFIELD title:"Azure's Logic main resource group name" caption:"Enter Azure's Logic main resource group name:" text:"resourcegroupname"
    #IF (ecode != 0) {# if "ok" button is not clicked, something went wrong
    #    EXIT
    #}
    #SET subscriptionId:(text) todo accomedare
    SET subscriptionId:("24a9446b-8b9b-42af-85ab-6476a6ad7cfc")

    # Todo questo decommentarlo
    #CC "AdoScript" EDITFIELD title:"Azure iot central application id" caption:"Enter Azure iot central application id:" text:"my-azure-iot-central-id"
    #IF (ecode != 0) {# if "ok" button is not clicked, something went wrong
    #    EXIT
    #}
    SETL applicationId: "ac37aa3e-5478-4122-9bf7-6294e993e353" # (text) todo accomedare
    
    # todo magari invece che controllare se ci sono piu connessioni api ad azure iot central o sendmessage o mongodb --> WARNINGBOX con scritto (make sure che ce sta un solo connessione api di ste cose)
    # forse in realtà manco ce sta bisogno: se ce n'è piu di una prendo la prima, che prob c'è (alla peggio ce n'è 2 e viene eliminata la prima)

    # per ora prendere per buona questa rule qua TODO alla fine accomedareq
    SETL ruleId:"0d06609f-85f7-465f-a020-9b4e03f74996"


    GET_SPECIFICATIONS platform: ("Azure") specs: specs


    #   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    # todo NEW STUFF
    # CYCLES_ANALYZE result:result toEsclude: <array Of Objid To Esclude From Single JsonFile Production> !!!!!!!!!!!!!
    # then iterate over all objids for each "blue object" excluding all the objids found in the CYCLE_ANALYZE procedure (ESCLUDO, se c'è un ciclo, sia l oggetto blu di partenza che gli intermedi/di arrivo)

    #   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    # todo fare si che a questi due (parameter e section) ci si possa aggiungere altra roba, così può funzicare(?)
    # permanent api connection... the one which permits "when_a_rule_is_fired" todo controllare in futuro se è stata creata più di una connessione
    SET onlyAzureIotCentralParameter:({
        "azureiotcentral": {
            "connectionId": "[parameters('connections_azureiotcentral_externalid')]",
            "connectionName": "azureiotcentral",
            "id": "/subscriptions/"+subscriptionId+"/providers/Microsoft.Web/locations/francesouth/managedApis/azureiotcentral"
        }
    })

    SET onlyAzureIotCentralParameterSection:({
        "connections_azureiotcentral_externalid": {
            "defaultValue": "/subscriptions/"+subscriptionId+"/resourceGroups/"+mainResourceGroupName+"/providers/Microsoft.Web/connections/azureiotcentral",
            "type": "String"
        }
    })

    # 1. for every single "blue object" create a specific .json
    # storage object
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("storage")

    # todo check if objids its not empty --> warning box: "make sure a single api connection and a single  mongo db connection are in your Azure portal resource group"
    
    FOR storage in:(objids) {
        CC "Core" GET_ATTR_VAL objid:(VAL storage) attrname:("psm_type")
        IF( val = "") {
            NEXT
        }
        SETL storageTypeSelected:(val)

        CC "Core" GET_ATTR_VAL objid:(VAL storage) attrname:("name")
        SETL storageName:(val)

         SETL stoargeSpecRecs:({})
        GET_SPECIFICATION_RECORDS objid:(VAL storage) specRecs:stoargeSpecRecs

        IF(storageTypeSelected="Insert_Document") { 
            # parameters exception handling
            IF(stoargeSpecRecs[0]="") {
                CC "AdoScript" WARNINGBOX ("mongoDB collection can't be empty, "+storageName+" .json file creation was aborted.")
                NEXT
            } ELSIF (stoargeSpecRecs[1]="") {
                CC "AdoScript" WARNINGBOX ("mongoDB data source (cluster name) can't be empty, "+storageName+" .json file creation was aborted.")
                NEXT
            } ELSIF (stoargeSpecRecs[2]="") {
                CC "AdoScript" WARNINGBOX ("mongoDB database name can't be empty, "+storageName+" .json file creation was aborted.")
                NEXT
            } ELSIF (stoargeSpecRecs[3]="") {
                CC "AdoScript" WARNINGBOX ("mongoDB ejson file can't be empty, "+storageName+" .json file creation was aborted.")
                NEXT
            } ELSIF (stoargeSpecRecs[4]="") {
                CC "AdoScript" WARNINGBOX ("Rule id can't be empty, "+storageName+" .json file creation was aborted.")
                NEXT
            }

        # SETL finalObject:({ todo uploaded on txt file "mongoDBtemplate"
            
        

            # 3. fill the new .json with the json structure informations and this model parameters
            #SETL primaryObject:(lam_toJson(finalObject))

            #SET filePath:(path + "\\"+applicationName+".json")
            #CC "AdoScript" FWRITE file:(filePath) text:(primaryObject)
            #CC "AdoScript" FWRITE file:("C:\\evvai\\"+storageName+".json") text:(primaryObject) # todo accomedare
            NEXT

        } ELSE {
            # parameters exception handling
            IF(stoargeSpecRecs[0] = "") {
                CC "AdoScript" WARNINGBOX ("Device id can't be empty, "+storageName+" .json file creation was aborted.")
                NEXT
            } ELSIF (stoargeSpecRecs[2] = "") {
                CC "AdoScript" WARNINGBOX ("Rule id can't be empty, "+storageName+" .json file creation was aborted.")
                NEXT

            }
            
            SETL createOrUpdateDeviceAction:({
                "Create_or_update_a_device": {
                            "runAfter": map(),
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "displayName": stoargeSpecRecs[1]
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureiotcentral']['connectionId']"
                                    }
                                },
                                "method": "put",
                                "path": "/api/ga_2022_07_31/devices/@{encodeURIComponent('"+stoargeSpecRecs[0]+"')}",
                                "queries": {
                                    "application": applicationId
                                }
                            }
                        }
            })

            CREATE_NEW_FILE actions:map triggers:defaultTrigger parametersSection:onlyAzureIotCentralParameterSection parameters:onlyAzureIotCentralParameter objectName:storageName
        } 
        CREATE_NEW_FILE action:(createOrUpdateDeviceAction) objectName:(storageName) ruleId:(stoargeSpecRecs[2])
    }

    # datastream_out object
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("data_stream_out")
    FOR dataStreamOut in:(objids) {
        CC "Core" GET_ATTR_VAL objid:(VAL dataStreamOut) attrname:("psm_type")
        IF( val = "") {
            NEXT
        }

        CC "Core" GET_ATTR_VAL objid:(VAL dataStreamOut) attrname:("name")
        SETL dataStreamOutName:(val)

        SETL dataStreamOutSpecRecs:({})
        GET_SPECIFICATION_RECORDS objid:(VAL dataStreamOut) specRecs:dataStreamOutSpecRecs

        # parameters exception handling
        IF(dataStreamOutSpecRecs[0]="") {
            CC "AdoScript" WARNINGBOX ("Command name can't be empty, "+dataStreamOutName+" .json file creation was aborted.")
            NEXT
        } ELSIF (dataStreamOutSpecRecs[1]="") {
            CC "AdoScript" WARNINGBOX ("Device id can't be empty, "+dataStreamOutName+" .json file creation was aborted.")
            NEXT
        } ELSIF (dataStreamOutSpecRecs[2]="") {
            CC "AdoScript" WARNINGBOX ("Rule id can't be empty, "+dataStreamOutName+" .json file creation was aborted.")
            NEXT
        }

        SETL newDataStreamOutObject:({
            "Run_a_device_command": {
                "inputs": {
                    "host": {
                        "connection": {
                            "name": "@parameters('$connections')['azureiotcentral']['connectionId']"
                        }
                    },
                    "method": "post",
                    "path": "/api/v1/devices/@{encodeURIComponent('"+dataStreamOutSpecRecs[1]+"')}/commands/@{encodeURIComponent('"+dataStreamOutSpecRecs[0]+"')}",
                    "queries": {
                        "application": applicationId
                    }
                },
                "runAfter": map(),
                "type": "ApiConnection"
            }
        })
        CREATE_NEW_FILE action:(newDataStreamOutObject) objectName:(dataStreamOutName) ruleId:(ruleId)
    }

    # pubsub_out object
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("pubsub_out")
    FOR pubsubOut in:(objids) {
        CC "Core" GET_ATTR_VAL objid:(VAL pubsubOut) attrname:("psm_type")
        IF( val = "") {
            NEXT
        }

        CC "Core" GET_ATTR_VAL objid:(VAL pubsubOut) attrname:("name")
        SETL pubsubOutName:(val)

        SETL pubsubOutSpecRecs:({})
        GET_SPECIFICATION_RECORDS objid:(VAL pubsubOut) specRecs:pubsubOutSpecRecs
        
        # parameters exception handling
        IF(pubsubOutSpecRecs[2]="") {
            CC "AdoScript" WARNINGBOX ("rule id can't be empty, "+pubsubOutName+" .json file creation was aborted.")
            NEXT
        }
        IF(pubsubOutSpecRecs[1]="" OR pubsubOutSpecRecs[1]!="Run details" OR pubsubOutSpecRecs[1]!="None") {
            SETL pubsubOutSpecRecs[1]:"None"
        }

       

        # 3. fill the new .json with the json structure informations and this model parameters
        #SETL primaryObject:(lam_toJson(finalObject))

        #SET filePath:(path + "\\"+applicationName+".json")
        #CC "AdoScript" FWRITE file:(filePath) text:(primaryObject)
        #CC "AdoScript" FWRITE file:("C:\\evvai\\"+pubsubOutName+".json") text:(primaryObject) # todo accomedare

    }

    # request_out object
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("request_out")
    FOR requestOut in:(objids) {
        CC "Core" GET_ATTR_VAL objid:(VAL requestOut) attrname:("psm_type")
        # parameters exception handling
        IF( val = "") {
            CC "AdoScript" WARNINGBOX ("psm_type not selected, "+requestOutName+" .json file creation was aborted.")
            NEXT
        }
        SETL httpMethod:(val)

        CC "Core" GET_ATTR_VAL objid:(VAL requestOut) attrname:("name")
        SETL requestOutName:(val)

        SETL requestOutSpecRecs:({})
        GET_SPECIFICATION_RECORDS objid:(VAL requestOut) specRecs:requestOutSpecRecs
        
        # parameters exception handling
        IF(requestOutSpecRecs[0]="") {
            CC "AdoScript" WARNINGBOX ("Destination URI can't be empty, "+requestOutName+" .json file creation was aborted.")
            NEXT
        } ELSIF(requestOutSpecRecs[4]="") {
            CC "AdoScript" WARNINGBOX ("rule id can't be empty, "+requestOutName+" .json file creation was aborted.")
            NEXT
        }

        SETL httpAction:({
            "HTTP": {
                "inputs": {
                    "body": requestOutSpecRecs[1],
                    "headers": {
                        requestOutSpecRecs[2]: requestOutSpecRecs[3]
                    },
                    "method": httpMethod,
                    "uri": requestOutSpecRecs[0]
                },
                "runAfter": map(),
                "type": "Http"
            }
        })

        SETL defaultTrigger:({})
        DEFAULT_TRIGGER triggers:defaultTrigger ruleId:(VAL requestOutSpecRecs[4])
        CREATE_NEW_FILE actions:(httpAction) triggers:(defaultTrigger) parametersSection:(onlyApiParameterSection) parameters:(onlyApiParameter) objectName:(requestOutName)
    }
} 


# AZURE LOGIC APP --- Main .json structure, flexible structure, todo in future: could be more and more accurated for each detail
PROCEDURE global CREATE_NEW_FILE
actions:map   # actions to be inserted  # todo map or array?
triggers:map
parametersSection:map
parameters:map
objectName:string
{   
    SETL finalObject:
    ({
        "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "parameters": {
            "workflows_"+newLogicAppName+"_name": {
                "defaultValue": newLogicAppName,
                "type": "String"
            },
            parametersSection
        }
        "variables": map(),   # forse questo in futuro potrà essere cambiato
        "resources": 
        ({
                "type": "Microsoft.Logic/workflows",
                "apiVersion": "2017-07-01",
                "name": "[parameters('workflows_"+newLogicAppName+"_name')]",
                "location": "francesouth",
                "tags": {
                    "ms-resource-usage": "azure-cloud-shell"
                },
                "properties": {
                    "state": "Enabled",
                    "definition": {
                        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                        "contentVersion": "1.0.0.0",
                        "parameters": {
                            "$connections": {
                                "defaultValue": map(),
                                "type": "Object"
                            }
                        },
                        triggers,   # todo accomedare qui sicuramente
                        "actions": actions,
                        "outputs": map()
                    },
                    "parameters": {
                        "$connections": {
                            "value": {
                                parameters       # todo probabile sarà da accomedare
                            }
                        }
                    }
                }
            })
    })
            

    # 3. fill the new .json with the json structure informations and this model parameters
    SETL primaryObject:(lam_toJson(finalObject))

    #SET filePath:(path + "\\"+applicationName+".json")
    #CC "AdoScript" FWRITE file:(filePath) text:(primaryObject)
    CC "AdoScript" FWRITE file:("C:\\evvai\\"+objectName+".json") text:(primaryObject) # todo accomedare
}


# todo: maybe in future there will be the opportunity to have multiple triggers (at the same time), for now it's inconvenient or (at least as I understood) only with
# time recurrency (ex: each 3 minutes do this)  
PROCEDURE global DEFAULT_TRIGGER
triggers:reference   # output reference
ruleId:string
{
    SETL triggers:({
        "triggers": {
            "When_a_rule_is_fired": {
                "type": "ApiConnectionWebhook",
                "inputs": {
                    "body": {
                        "rule": ruleId,
                        "url": "@{listCallbackUrl()}"
                    },
                    "host": {
                        "connection": {
                            "name": "@parameters('$connections')['azureiotcentral']['connectionId']"
                        }
                    },
                    "path": "/api/preview/_internal/workflow/triggers",
                    "queries": {
                        "application": applicationId    # initialized at the start of the file
                    }
                }
            }
        }
    })
}
