# Useful to create dynamic json files to be uploaded on Azure Logic App as templates
# ----
# this permits the creation of a single .json file and dynamically permits the creation of a file made of more actions

PROCEDURE global GET_INSERT_DOCUMENT_ACTION
insertDocumentAction:reference
runAfter:map
stoargeSpecRecs:array
{
    # parameters exception handling
    IF(stoargeSpecRecs[0]="") {
        CC "AdoScript" WARNINGBOX ("mongoDB collection can't be empty, "+storageName+" .json file creation was aborted.")
        EXIT
    } ELSIF (stoargeSpecRecs[1]="") {
        CC "AdoScript" WARNINGBOX ("mongoDB data source (cluster name) can't be empty, "+storageName+" .json file creation was aborted.")
        EXIT
    } ELSIF (stoargeSpecRecs[2]="") {
        CC "AdoScript" WARNINGBOX ("mongoDB database name can't be empty, "+storageName+" .json file creation was aborted.")
        EXIT
    } ELSIF (stoargeSpecRecs[3]="") {
        CC "AdoScript" WARNINGBOX ("mongoDB ejson file can't be empty, "+storageName+" .json file creation was aborted.")
        EXIT
    } ELSIF (stoargeSpecRecs[4]="") {
        CC "AdoScript" WARNINGBOX ("Rule id can't be empty, "+storageName+" .json file creation was aborted.")
        EXIT
    }

    SET insertDocumentAction:({
                "Insert_Document": {
                    "runAfter": runAfter,
                    "type": "ApiConnection",
                    "inputs": {
                        "body": {
                            "collection": stoargeSpecRecs[0],
                            "dataSource": stoargeSpecRecs[1],
                            "database": stoargeSpecRecs[2],
                            "document": stoargeSpecRecs[3]
                        },
                        "headers": {
                            "Access-Control-Request-Headers": "*",
                            "Content-Type": "application/json"
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['mongodb']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/action/insertOne"
                    }
                }
    })
}


PROCEDURE global GET_CREATE_OR_UPDATE_DEVICE_ACTION
createOrUpdateDeviceAction:reference
runAfter:map
stoargeSpecRecs:array
{
    # parameters exception handling
    IF(stoargeSpecRecs[0] = "") {
        CC "AdoScript" WARNINGBOX ("Device id can't be empty, "+storageName+" .json file creation was aborted.")
        EXIT
    } ELSIF (stoargeSpecRecs[2] = "") {
        CC "AdoScript" WARNINGBOX ("Rule id can't be empty, "+storageName+" .json file creation was aborted.")
        EXIT
    }
            
            SET createOrUpdateDeviceAction:({
                "Create_or_update_a_device": {
                            "runAfter": runAfter,
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "displayName": stoargeSpecRecs[1]
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureiotcentral']['connectionId']"
                                    }
                                },
                                "method": "put",
                                "path": "/api/ga_2022_07_31/devices/@{encodeURIComponent('"+stoargeSpecRecs[0]+"')}",
                                "queries": {
                                    "application": applicationId
                                }
                            }
                        }
            })
}

PROCEDURE global GET_RUN_A_DEVICE_COMMAND_ACTION
runADeviceCommandAction:reference
runAfter:map
dataStreamOutSpecRecs:array
{
    # parameters exception handling
    IF(dataStreamOutSpecRecs[0]="") {
        CC "AdoScript" WARNINGBOX ("Command name can't be empty, "+dataStreamOutName+" .json file creation was aborted.")
        EXIT
    } ELSIF (dataStreamOutSpecRecs[1]="") {
        CC "AdoScript" WARNINGBOX ("Device id can't be empty, "+dataStreamOutName+" .json file creation was aborted.")
        NEXT
    } ELSIF (dataStreamOutSpecRecs[2]="") {
        CC "AdoScript" WARNINGBOX ("Rule id can't be empty, "+dataStreamOutName+" .json file creation was aborted.")
        EXIT
    }

    SET runADeviceCommandAction:({
            "Run_a_device_command": {
                "inputs": {
                    "host": {
                        "connection": {
                            "name": "@parameters('$connections')['azureiotcentral']['connectionId']"
                        }
                    },
                    "method": "post",
                    "path": "/api/v1/devices/@{encodeURIComponent('"+dataStreamOutSpecRecs[1]+"')}/commands/@{encodeURIComponent('"+dataStreamOutSpecRecs[0]+"')}",
                    "queries": {
                        "application": applicationId
                    }
                },
                "runAfter": runAfter,
                "type": "ApiConnection"
            }
        })
}

PROCEDURE global GET_HTTP_ACTION
httpAction:reference
runAfter:map
requestOutSpecRecs:array
{
    # parameters exception handling
        IF(requestOutSpecRecs[0]="") {
            CC "AdoScript" WARNINGBOX ("Destination URI can't be empty, "+requestOutName+" .json file creation was aborted.")
            EXIT
        } ELSIF(requestOutSpecRecs[4]="") {
            CC "AdoScript" WARNINGBOX ("rule id can't be empty, "+requestOutName+" .json file creation was aborted.")
            EXIT
        }

        SETL httpAction:({
            "HTTP": {
                "inputs": {
                    "body": requestOutSpecRecs[1],
                    "headers": {
                        requestOutSpecRecs[2]: requestOutSpecRecs[3]
                    },
                    "method": requestOutSpecRecs[5],    # appended before the call of this procedure
                    "uri": requestOutSpecRecs[0]
                },
                "runAfter": map(),
                "type": "Http"
            }
        })
}

PROCEDURE global GET_SEND_MESSAGE_ACTION
sendMessageAction:reference
runAfter:map
pubsubOutSpecRecs:array
{
    # parameters exception handling
    IF(pubsubOutSpecRecs[2]="") {
        CC "AdoScript" WARNINGBOX ("rule id can't be empty, "+pubsubOutName+" .json file creation was aborted.")
        EXIT
    }
    IF(pubsubOutSpecRecs[1]="" OR pubsubOutSpecRecs[1]!="Run details" OR pubsubOutSpecRecs[1]!="None") {
        SETL pubsubOutSpecRecs[1]:"None"
    }

     SETL sendMessageAction:({
            "Send_message": {
                "inputs": {
                    "body": {
                        "SessionId": pubsubOutSpecRecs[0]
                    },
                    "host": {
                        "connection": {
                            "name": "@parameters('$connections')['servicebus']['connectionId']"
                        }
                    },
                    "method": "post",
                    # assume that "action" is what we need to send as message: todo maybe the aim of this procedure could be different in future
                    "path": "/@{encodeURIComponent(encodeURIComponent(triggerBody()?['action']?['displayName']))}/messages",
                    "queries": {
                        "systemProperties": pubsubOutSpecRecs[1]
                    }
                },
                "runAfter": runAfter,
                "type": "ApiConnection"
            }
        })

    
}
