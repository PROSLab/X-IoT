# this script generates two XIoT Scenario PIM views starting from a Feature Model PSM (with its Feature Operation Model PSM)
# "first view" is the model containing a view of the systems and devices in the Feature model.
# "second view" refers to the model containing devices with their operations/events and all their attributes

# index:
# 1 - MENU - EMPTY MODEL CREATION
# 2 - MAIN PROCEDURE - XIOT SCENARIO CREATION
# 3 - PIM VIEW CREATION
# 4 - DETAILED DEVICE VIEW CREATION
# 5 - IOT LOGIC CREATION
# 0 - MISC

# COMMENT OUT THE FOLLOWING LINE TO CALL THE SCRIPT FROM EXT COUPLING AS PROCEDURE INSTEAD OF DOING "EXECUTE file:(<local_path>\\iot_scenario_creation.asc)"
#GENERATE_SCENARIO

# -------------------------- MENU - EMPTY MODEL CREATION -------------------------- #

PROCEDURE global GENERATE_SCENARIO {
    CC "Modeling" GET_ACT_MODEL

    CC "AdoScript" WARNINGBOX ("Please ensure that the Device View model is opened.\n\nPlease remind that in the PSM models the operations that are not selected will NOT be included! ")
 
    SETG a_srcmodelid:(modelid)     # feature model
    SETG a_opssrcmodelid:0          # feature device view (operations)
    SETG a_dstmodelid:0             # xiot scenario pim
    SETG a_opsdstmodelid:0          # xiot scenario pim - device view


    CC "Modeling" GET_VIEW_MODE
    SETG modenamepsm:0
    IF (modename = "PSM") {
        SET modenamepsm:1
    }

    # Creates X-IoT Scenario PIM,
    #   X-IoT Scenario PIM - Device View
    #   and X-IoT Logic PIM
    CREATE_NEW_XIOT_SCENARIOS
    
    CC "Modeling" SAVE_ALL

    EXIT
}

PROCEDURE global CREATE_NEW_XIOT_SCENARIOS {
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select a target modelgroup"
    IF (endbutton != "ok") {
        EXIT
    }
    CC "Core" GET_MODEL_BASENAME modelid:(modelid)
    SET parentModelgroupId:(mgroupids)

    CC "AdoScript" EDITFIELD title:("Insert new model name..." + basename) caption:("~Modelname:")
    IF (ecode != 0) {
        EXIT
    }

    # Handle modelgroups: collocate PIM models inside a modelgroup called: <originalPimModelName> - PIM 
    SETG defaultModelgroupName:(text)
    CC "Core" CREATE_MODELGROUP supermgroupid:(VAL parentModelgroupId) mgroupname:(defaultModelgroupName + " - PIM")
    SET pimModelgroupId:(mgroupid)

    CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(text) version:"" mgroups:(pimModelgroupId)
    IF (ecode = 0) {
        SET a_dstmodelid:(modelid)
    } ELSIF (ecode = 40) {
        CC "AdoScript" ERRORBOX ("A model with the same name already exists!") ok
        EXIT
    } ELSE {
        CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + errtext) ok
        EXIT
    }
    CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(text + " - Device View") version:"" mgroups:(pimModelgroupId)  # (pimModelgroupId)
    SET a_opsdstmodelid:(modelid)
    SET operationsModelName:(text)

    GENERATE_ELEMENTS

    # magari fare che la vista delle operazioni viene generata solo se effettivamente ci sono delle ops

    # SKIP Logic model generation if we don't have any "service" object in our model
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_opsdstmodelid) classname:"service"
    IF (objids = "") {
        EXIT
    }

    GENERATE_LOGIC srcmodelname:(operationsModelName) srcmodelid:(a_opsdstmodelid)
}

# -------------------------- MAIN PROCEDURE - XIOT SCENARIO CREATION -------------------------- #


PROCEDURE global GENERATE_ELEMENTS {
    # copy all "Feature" objects (Feature model)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_srcmodelid) classname:"Feature"
    SETL allobjs:(objids)

    LOAD_FEATURE_FEATURES featureobjs:(allobjs) featureobjsmap:objsmap

    CREATE_SELECTED_OBJECTS featureobjs:(objsmap) featureobjsmap:objsmap
    CREA_CONNETTORI featureobjs:(objsmap) ecode:ecode

    POSIZIONA_SAME_POS featureobjs:(objsmap) ecode:ecode

    # create a detailed view of the devices
    GENERATE_DEVICE_SECOND_VIEW featureobjs:(objsmap) ecode:ecode 
}


# -------------------------- PIM VIEW CREATION -------------------------- #
PROCEDURE global LOAD_FEATURE_FEATURES featureobjs:string featureobjsmap:reference {
    #maybe there was a way to use allattrnames to get all attributes names and then all values
    SET featureobjsmap:(map())
    FOR featureid in:(featureobjs) {
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Selection")
        IF (val = "No Selected" AND modenamepsm = 1) {
            NEXT
        }
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Name")
        SETL name:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Description")
        SETL description:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Device type")  #solo per device
        SETL devicetype:(val)

        CC "Core" GET_CLASS_ID objid:(VAL featureid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        SETL type:(classname)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Position"
        CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrid:(attrid)
        LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
        SETL featureobjsmap[featureid]:({
            "Name": name,
            "Description": description,
            "Class": type,
            "Device Type": devicetype,
            "X": x,
            "Y": y
        })
    }
}

PROCEDURE global CREATE_SELECTED_OBJECTS featureobjs:map featureobjsmap:reference {
# create objects but don't place them in the model
    SETG x:(2cm)
    SETG y:(2cm)
    CC "Modeling" OPEN modelids:(a_dstmodelid)
    SET ecode:0
    SETL currclass:"none"
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL featureobj:(featureobjs[featureid])
        SETL featobjid:(featureid)
        GET_CORRECT_XIOT_CLASSID featobjid:(VAL featobjid) xiotclassid:xiotclassid
        CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(xiotclassid)   #crea oggetto prima view
        SETL newobjid:(objid)
        CC "Core" SET_ATTR_VAL objid:(newobjid) attrname:"name" val:(featureobj["Name"])
        CC "Core" SET_ATTR_VAL objid:(newobjid) attrname:"description" val:(featureobj["Description"])
        CC "Core" SET_ATTR_VAL objid:(newobjid) attrname:"type" val:(lower(featureobj["Device Type"]))
        SETL currclass:(featureobj["Class"])
        SETL devviewid:0
        IF (currclass = "Device") {
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(xiotclassid)    #creo anche su seconda view
            SETL devviewid:(objid)   #id device nella seconda view
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(featureobj["Name"])
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"description" val:(featureobj["Description"])
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"type" val:(lower(featureobj["Device Type"]))
            #location attribute
            CC "Core" GET_CLASS_ID classname:("location")
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(classid)
            SETL locationid:(objid)
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("Coverage")
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"coverage" val:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL featureid) attrname:("GeoPoints")
            IF (val != "") {
                SETL lat:(token(val, 0, ";"))
                SETL lon:(token(val, 1, ";"))
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:"lat" val:(lat)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:"lon" val:(lon)
            }
            CC "Core" GET_CLASS_ID relation classname:"hasLocation"
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(devviewid) toobjid:(locationid) classid:(classid)
            CC "Core" GET_CLASS_ID classname:"device"
            CC "Core" GET_ATTR_ID classid:(classid) attrname:"structure"
            CC "Core" ADD_INTERREF objid:(newobjid) attrid:(attrid) tobjid:(devviewid)
            CC "Core" ADD_INTERREF objid:(devviewid) attrid:(attrid) tobjid:(newobjid)
        }

        CC "Core" GET_CONNECTORS objid:(VAL featureid) in       #prendo connettori entranti in current featureobj
        SETL parentid:0
        FOR connid in:(objids) {
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
            CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:("Selection")
            IF (val = "Selected" OR modenamepsm = 0) {
                SET parentid:(fromobjid)
            }
        }
        SETL x:(featureobj["X"])
        SETL y:(featureobj["Y"])
        SETL featureobjs[featureid]:({
            "NewId": newobjid,  #integer
            "Class": currclass,
            "Parent": parentid,
            "DevViewId": devviewid, #ID DELLA VIEW DEI DEVICES
            "X": x,
            "Y": y
        })
    }
    SET featureobjsmap:(featureobjs)    # reference della procedure
}

PROCEDURE global CREA_CONNETTORI featureobjs:map ecode:reference {
    # CC "AdoScript" INFOBOX (featureobjs)
    SET ecode:0
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL featureobj:(featureobjs[featureid])
        IF (featureobj["Parent"] = 0) {
            NEXT    #nessun connettore da creare
        }
        IF (featureobj["Class"] = "System") {
            CC "Core" GET_CLASS_ID relation classname:"subsystem"
            SETL relclassid:(classid)
        } ELSIF (featureobj["Class"] = "Device") {
            CC "Core" GET_CLASS_ID relation classname:"hasDevice"
            SETL relclassid:(classid)
        } ELSE {
            NEXT
        }
        SETL parentid:(STR featureobj["Parent"])
        # SETL xiotparent:(featureobjs[parentid]) # PERCHE PARENTID VAL
        SETL xiotparentid:(featureobjs[parentid]["NewId"]) 
        SETL xiotobjid:(featureobj["NewId"])
        CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(xiotparentid) toobjid:(xiotobjid) classid:(relclassid)
    }
}


# -------------------------- DETAILED DEVICE VIEW CREATION -------------------------- #

# WARNING: if there is a malfunctionality with this, it could be some kind of problem with the INTERREF (check the models!)
PROCEDURE global GENERATE_DEVICE_SECOND_VIEW featureobjs:map ecode:reference {
# devices already inside second view ( - Device view)! need to add operations and events -> use only devices who have these operations/events
    SETL devicesmap:(map())
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {     # map with devices only
        SETL currobj:(featureobjs[featureid])
        IF (currobj["Class"] != "Device") {
            NEXT
        }
        SETL newdevid:(currobj["DevViewId"])
        #"NewId" and "DevViewId" are the ids of the first view xiot and the second view xiot
        SETL devicesmap[featureid]:({   #id in the source feature model psm
            "NewId": newdevid,          #id in the device view (operations)
            "Operations": {}
        })
        SETL operations:({})
        SETL device:(devicesmap[featureid])

        # get objid of device in feature psm ops using the interref
        CC "Core" GET_INTERREF objid:(VAL featureid) attrname:("Component")
        SETL olddevobjid:(tobjid)
        CC "Core" GET_CONNECTORS objid:(olddevobjid) out # todo CLASS_INSTANCE_NOT_EXISTING

        # got operations attached to the device

        # FORSE posso creare gli oggetti direttamente da dentro questo ciclo for
        # ..ovvero senza questa mappa devicesmap in mezzo
        FOR connid in:(objids) {        #per ogni operazione collegata al device
            SETL operation:(map())
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Selection")
            IF (val = "No Selected" AND modenamepsm = 1) {
                NEXT #skip iteration
            }
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Operation Name")
            SETL operation["Name"]:(val)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Description")
            SETL operation["Description"]:(val)
            # CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Required")
            # SETL operation["Required"]:(val)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Type")
            SETL operation["Type"]:(val)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Data Type")
            SETL operation["Data Type"]:(val)
            CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:("Service")
            SETL operation["Service"]:(val)
            
            SETL specs:(map())
            CC "Core" GET_CLASS_ID classname:"Operation"
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            IF (val = "MQTT" OR val = "HTTP") {
                CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(toobjid) attrid:(attrid)
                IF (ecode = 0) {
                    IF (rowids != "") {
                        FOR rowid in:(rowids) {
                            CC "Core" GET_ATTR_VAL objid:(VAL rowid) attrname:("Attribute")
                            SETL speckey:(val)
                            CC "Core" GET_ATTR_VAL objid:(VAL rowid) attrname:("Value")
                            SETL specval:(val)
                            SETL specs[rowid]:({
                                "Key": speckey,
                                "Val": specval
                            })
                        }
                    }
                }
            }

            SETL operation["Specification"]:(specs)
            # SPECS is empty if the INTERREF is undefined (GET interref failed)
            # CC "AdoScript" INFOBOX ("specs: " + STR specs)
            SETL n:(aappend(operations, operation))
        }
        SETL device["Operations"]:(operations)
        SETL devicesmap[featureid]:(device)
    }

    # CC "AdoScript" INFOBOX (devicesmap)
    
    # nuovi id (xiot scenario ops) stanno in devids. i device con le ops stanno in devicesmap.

    # GENERATE_DEVICES_OPERATIONS (da qui in poi) #(chiamare funzione separata?)

    FOR deviceid in:(mapKeysList(devicesmap)) sep:("~") {
        SETL device:(devicesmap[deviceid])
        SETL operations:(device["Operations"])
        SETL nops:(operations.length)
        FOR i from:0 to:(nops-1) {
            SETL name:(operations[i]["Name"])
            SETL rand:(name + STR randomDiscreteUniformDist(10000, 99999))
            SETL description:(operations[i]["Description"])
            # SETL required:(operations[i]["Required"])
            SETL type:(operations[i]["Type"])
            SETL service:(operations[i]["Service"])
            SETL datatype:(operations[i]["Data Type"])
            SETL specs:(operations[i]["Specification"])
            IF (type = "Event") {
                CC "Core" GET_CLASS_ID classname:("Event")
                SETL rightclassid:(classid)
                CC "Core" GET_CLASS_ID relation classname:("hasEvent")
                SETL rightrelclassid:(classid)
                CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(rightclassid) objname:(rand)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Event Name") val:(name)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(description)
            } ELSE {
                CC "Core" GET_CLASS_ID classname:("Device Operation")
                SETL rightclassid:(classid)
                CC "Core" GET_CLASS_ID relation classname:("hasOperation")
                SETL rightrelclassid:(classid)
                CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(rightclassid) objname:(rand)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("name") val:(name)
                CC "Core" SET_ATTR_VAL objid:(objid) attrname:("description") val:(description)
            }
            SETL newobjid:(objid)
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(device["NewId"]) toobjid:(newobjid) classid:(rightrelclassid)

            CC "Core" GET_CLASS_ID classname:"service"
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(classid)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("protocol") val:(service)
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
            FOR rowid in:(mapKeysList(specs)) sep:("~") {
                SETL currrow:(specs[rowid])
                CC "Core" ADD_REC_ROW objid:(objid) attrid:(attrid)
                SETL key:(currrow["Key"])
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Attribute") val:(key)
                SETL val:(currrow["Val"])
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(val)
            }
            CC "Core" GET_CLASS_ID relation classname:"hasService"
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(newobjid) toobjid:(objid) classid:(classid)

            CC "Core" GET_CLASS_ID classname:"attribute"
            CC "Core" CREATE_OBJ modelid:(a_opsdstmodelid) classid:(classid)
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:("type") val:(datatype)
            CC "Core" GET_CLASS_ID relation classname:"hasAttribute"
            CC "Core" CREATE_CONNECTOR modelid:(a_opsdstmodelid) fromobjid:(newobjid) toobjid:(objid) classid:(classid)
        }
    }
    POSIZIONA_DEVICES
}


# -------------------------- IOT LOGIC CREATION -------------------------- #


PROCEDURE global GENERATE_LOGIC srcmodelname:string srcmodelid:integer {

    # all "service" objects
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(srcmodelid) classname:"service"
    SETL serviceids:(objids)

    CC "Core" CREATE_MODEL modeltype:("IoT Logic") modelname:(srcmodelname + " - Logic") version:"" mgroups:(pimModelgroupId)
    SETL a_logicmodelid:(modelid)

    CC "Core" GET_CLASS_ID classname:"data_stream_in"
    SETL datainid:(classid)
    CC "Core" GET_CLASS_ID classname:"data_stream_out"
    SETL dataoutid:(classid)
    CC "Core" GET_CLASS_ID classname:"service"
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"structure"
    SETL servicerefattrid:(attrid)
    CC "Core" GET_ATTR_ID classid:(datainid) attrname:"service"
    SETL datainrefattrid:(attrid)
    CC "Core" GET_ATTR_ID classid:(dataoutid) attrname:"service"
    SETL dataoutrefattrid:(attrid)

    FOR serviceid in:(serviceids) {
        # get connector (there's supposed to be only one connector)
        CC "Core" GET_CONNECTORS objid:(VAL serviceid) in
        IF (ecode != 0) {
            CC "Core" ECODE_TO_ERRTEXT ecode:(ecode)
            CC "AdoScript" INFOBOX (errtext + " connector ids: " + objids)
            NEXT
        }
        SETL connid:(token(objids, 0, " "))
        
        # get Device Operation or Event (to obtain name)
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)

        CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"name"

        SETL devOpOrEventName:(val)

        # get connector (there's supposed to be only one connector)
        CC "Core" GET_CONNECTORS objid:(fromobjid) in
        SETL connid:(token(objids, 0, " "))
        
        # get device (to obtain name and type)
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connid)
        CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"name"

        SETL datastreaminname:(val +" - "+ devOpOrEventName)
        SETL datastreamoutname:(val +" - "+ devOpOrEventName)

        CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"type"

        IF (val = "sensor" OR val = "tag") {
            # create only data_stream_in
            CC "Core" CREATE_OBJ modelid:(a_logicmodelid) classid:(datainid) objname:(datastreaminname + STR randomDiscreteUniformDist(10000, 99999))
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(datastreaminname)
            # add interref to both objects (service <-> DSI)
            CC "Core" ADD_INTERREF objid:(VAL serviceid) attrid:(servicerefattrid) tobjid:(objid)
            CC "Core" ADD_INTERREF objid:(objid) attrid:(datainrefattrid) tobjid:(VAL serviceid)
        } ELSIF (val = "actuator" OR val = "gateway") {
            # create data_stream_in
            CC "Core" CREATE_OBJ modelid:(a_logicmodelid) classid:(datainid) objname:(datastreaminname + STR randomDiscreteUniformDist(10000, 99999))
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(datastreaminname)
            # add interref to both objects (service <-> DSI)
            CC "Core" ADD_INTERREF objid:(VAL serviceid) attrid:(servicerefattrid) tobjid:(objid)
            CC "Core" ADD_INTERREF objid:(objid) attrid:(datainrefattrid) tobjid:(VAL serviceid)
            SETL uno:(objid)
            # create data_stream_out
            CC "Core" CREATE_OBJ modelid:(a_logicmodelid) classid:(dataoutid) objname:(datastreamoutname + STR randomDiscreteUniformDist(10000, 99999))
            CC "Core" SET_ATTR_VAL objid:(objid) attrname:"name" val:(datastreamoutname)
            # add interref to both objects (service <-> DSO)
            CC "Core" ADD_INTERREF objid:(VAL serviceid) attrid:(servicerefattrid) tobjid:(objid)
            CC "Core" ADD_INTERREF objid:(objid) attrid:(dataoutrefattrid) tobjid:(VAL serviceid)
            SETL due:(objid)
            # create connector from DSI to DSO
            CC "Core" GET_CLASS_ID relation classname:"contains"
            CC "Core" CREATE_CONNECTOR modelid:(a_logicmodelid) fromobjid:(uno) toobjid:(due) classid:(classid)
        } ELSE {
            CC "AdoScript" ERRORBOX ("Fatal error, couldnt get device type")
        }
    }
    CC "Modeling" OPEN modelids:(a_logicmodelid)
    POSIZIONA_GENERICS
}

# -------------------------- MISC -------------------------- #

PROCEDURE global GET_CORRECT_XIOT_CLASSID featobjid:integer xiotclassid:reference {
    CC "Core" GET_CLASS_ID objid:(featobjid)
    CC "Core" GET_CLASS_NAME classid:(classid)
    SETL featclassname:(classname)
    IF (featclassname = "Feature" OR featclassname = "System") {
        CC "Core" GET_CLASS_ID classname:("system")
    } ELSIF (featclassname = "Device") {
        CC "Core" GET_CLASS_ID classname:("device")
    } ELSIF (featclassname = "Operation") {
        CC "Core" GET_ATTR_VAL objid:(featobjid) attrname:("Class")
        IF (val = "Event") {
            CC "Core" GET_CLASS_ID classname:("Event")
        } ELSIF (val = "Operation") {
            CC "Core" GET_CLASS_ID classname:("Device Operation")
        }
    }
    SET xiotclassid:(classid)
}

PROCEDURE global POSIZIONA_SAME_POS featureobjs:map ecode:reference {
    FOR featureid in:(mapKeysList(featureobjs)) sep:("~") {
        SETL currobj:(featureobjs[featureid])
        CC "Modeling" SET_OBJ_POS objid:(currobj["NewId"]) 
            x:(currobj["X"]) y:(currobj["Y"])
    }
}

# place the "location" object beside the "device" object
# and the "Device Operation" objects underneath, beside this object place the "attribute and"
PROCEDURE global POSIZIONA_DEVICES {
    CC "Modeling" OPEN modelids:(a_opsdstmodelid)

    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_opsdstmodelid) classname:("device")
    
    SETL objPosX:(2cm)
    SETL objPosY:(2cm)

    # for each device
    FOR device in:(objids) {
        
        CC "Modeling" SET_OBJ_POS objid:(VAL device) x:(objPosX) y:(objPosY)
        
        SETL devopsIds:({})
        SETL attributeId:0
        SETL serviceId:0
        CC "Core" GET_CONNECTORS objid:(VAL device) out

        # maybe there's a way to understand if a connector is a relation class (ex: "hasLocation") it will be usefull (classid & classname will be skipped)
        FOR connector in:(objids) {
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)

            CC "Core" GET_CLASS_ID objid:(toobjid)
            CC "Core" GET_CLASS_NAME classid:(classid)

            # place "location" object beside the device
            IF (classname = "location") {
                CC "Modeling" SET_OBJ_POS objid:(toobjid) x:(objPosX + 5cm) y:(objPosY)
            } ELSIF (classname = "Device Operation") {                
                # save the other objects in a temporary array
                SETL uselessReturnVariable:(aappend(devopsIds, toobjid))
            }
        }

        SETL objPosY:(objPosY + 5cm)

        # skip the "Device Operation" objects placement if this "device" object has no operations
        IF ( devopsIds.length = 0) {
            NEXT
        }

        # place the "Device Operation" objects in the line underneath the "device" objects
        FOR i from:0 to:(devopsIds.length - 1) {
            SETL objPosX:(objPosX + CM(5*i))
            CC "Modeling" SET_OBJ_POS objid:(devopsIds[i]) x:(objPosX) y:(objPosY)

            # place the "attribute" and "service" objects in the line underneath the "Device Operation" object 
            CC "Core" GET_CONNECTORS objid:(devopsIds[i]) out
            FOR connector in:(objids) {
                CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)

                CC "Core" GET_CLASS_ID objid:(toobjid)
                CC "Core" GET_CLASS_NAME classid:(classid)
                IF (classname = "attribute") {
                    SETL attributeId:(toobjid)
                } ELSIF (classname = "service") {
                    SETL serviceId:(toobjid)
                }
            }

            # add line
            IF(i=0) {
                SETL objPosY:(objPosY + 5cm)
                SETL objPosX:(2cm)
            } ELSE {
                SETL objPosY:(objPosY + 5cm)
            }

            # "attribute" and "service" object side by side
            CC "Modeling" SET_OBJ_POS objid:(attributeId) x:(objPosX) y:(objPosY)
            SETL objPosX:(objPosX + 5cm)
            CC "Modeling" SET_OBJ_POS objid:(serviceId) x:(objPosX) y:(objPosY)
            
            # recalibrate position if there's another "Device Operation" object
            IF(i != devopsIds.length-1) {
                SETL objPosY:(objPosY - 5cm)
            }
        }

        # add line
        SETL objPosY:(objPosY + 5cm)
        SETL objPosX:(2cm)
    }
    CC "Modeling" SAVE modelid:(a_opsdstmodelid)
    CC "Modeling" REBUILD_DRAWING_AREA
}

PROCEDURE global POSIZIONA_GENERICS {

    CC "Modeling" GET_ACT_MODEL

    SETL objPosX:(3cm)
    SETL objPosY:(2cm)

    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:("data_stream_in")

    FOR objid in:(objids) {
        CC "Modeling" SET_OBJ_POS objid:(VAL objid) x:(objPosX) y:(objPosY)
        CC "Core" GET_CONNECTORS objid:(VAL objid) out

        # we assume that each data_stream_in object has only one data_stream_out object linked to
        IF(objids.length != 0) {
            FOR connector in:(objids) {
                CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)
                CC "Modeling" SET_OBJ_POS objid:(toobjid) x:(objPosX + 7cm) y:(objPosY)
            }
        }
        SETL objPosY:(objPosY + 4cm)
    }
    
}