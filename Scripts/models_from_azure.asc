# Script that imports information about Devices, Device templates and Dashboards from Azure sequentially:
#	it creates a new model within the information got by API calls.
#
# - first the devices are created (placed in the middle)
# - in the "line" underneath there are the telemetries, the commands and the propertyLocation
# - the last "line" contains the widget associated to the telemetries or the propertyLocation
# 

# NOTES:
#	- the device group id is searched only by "displayName" attribute, got by API call:
# 		it may be not similar to the "device" name, so it could be empty sometimes
#


# API calls format is inside the "azure.json" file

# COMMENT OUT THE FOLLOWING LINE TO CALL THE SCRIPT FROM ADD-ONS>EXT COUPLING AS PROCEDURE INSTEAD OF DOING "EXECUTE file:(<local_path>\\models_from_azure.asc)"
# insert "EXECUTE file:(db:\\models_from_azure.asc)" in the global event "onAppInitialized"
MODELS_FROM_AZURE

PROCEDURE global MODELS_FROM_AZURE
{    
	CC "Modeling" GET_ACT_MODEL
	SETL modelid:(modelid)
	IF (modelid = -1) {
        CC "AdoScript" WARNINGBOX ("Select an empty IoT scenario - Azure PSM model to proceed")
        EXIT
    }
	CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)
    CC "Core" GET_ATTR_VAL objid:(modelid) attrname:("Platform")
    SETL platform: (val)
    CC "Core" GET_ATTR_VAL objid:(modelid) attrname:("Model Type")
    IF(val = "PIM" OR modeltype != "IoT Scenario" OR platform != "Azure") {
        CC "AdoScript" ERRORBOX "Select an empty IoT scenario - Azure PSM model first!" title:("Invalid model")
        EXIT
    }	

	CC "Modeling" GET_ACT_MODEL
	SETL a_dstmodelid:(modelid)
	CC "Modeling" OPEN modelids:(STR a_dstmodelid)

	GET_SPECIFICATIONS platform: ("Azure") specs: specs
    SET specifications: (specs)

	# Get application name
	CC "AdoScript" EDITFIELD title:"Azure's application subdomain" caption:"Application subdomain:" text:"MyAzureApplication"
	IF (ecode != 0) {
        EXIT
    }
    SET applicationSubdomain: ("nuovaiotapplication") #  (text) accomedare

	# Get API token and check correct token
	SET headers: (map())
	CC "AdoScript" EDITFIELD title:"Azure's API token" caption:"API token (find it at 'Permissions>API tokens'):" text:"API token"
	IF (ecode != 0) {
        EXIT
    }
	SET apiToken:(text)
	IF(apiToken.length > 158) {
		# todo accomedare CC "AdoScript" WARNINGBOX ("The API token is too long, something went wrong... Please try again with another valid API token")
		EXIT
	}
	SETL x:(search(apiToken, "SharedAccessSignature sr=", 0))		
	IF ( x = -1 ) {
		# todo accomedare CC "AdoScript" WARNINGBOX ("Please include the 'SharedAccessSignature sr=' part to your API token")
		# EXIT
	}

	# GLOBAL API TOKEN (used by some other procedures in this file) keep attention please
	SET headers["Authorization"]: ("SharedAccessSignature sr=ac37aa3e-5478-4122-9bf7-6294e993e353&sig=CDOnY9RjZDyzrnxvQYG8ySc1Fk3sIs%2BznNDcAqNKlpg%3D&skn=ultimopoibasta&se=1710521310703") # (apiToken) # todo accomedare
	#SETL headers["Content-Type"]:("application/json;odata=verbose") todo forse serve solo per le PUT
 	
	SETG subdomainNotValid:0
	SETL devicesArray:(map())
	GET_AZURE_OBJECTS objectFromJsonStructure: "device" method: "get_devices" objectsArray: devicesArray
	IF(subdomainNotValid=1) {
		EXIT
	}

	# not from "attribute" but from "device" cause we can have a device template built up by "Device Operations" and "attribute" objects, "device" includes them all
	SETL deviceTemplatesArray:(map())
	GET_AZURE_OBJECTS objectFromJsonStructure: "device_template" method: "get_devices_templates" objectsArray: deviceTemplatesArray


	SETL dashboardsArray:(map())
	GET_AZURE_OBJECTS objectFromJsonStructure: "dashboard" method: "get_dashboards" objectsArray: dashboardsArray  # "dashboard" used to interact with "widget" objects


	SETL deviceGroupsArray:(map())
	GET_AZURE_OBJECTS objectFromJsonStructure: "device_group" method: "get_device_groups" objectsArray: deviceGroupsArray

	EXTRACT_CLASSIDS
	
	SETL objPosX:(2cm)
	SETL objPosY:(2cm)

	# TODO rendere codice piu moduare: dividere almeno in sotto procedure... cosi troppo lungo dai che Ã¨
	# the equivalent of "FOR <device> in <devicesArray>"
	FOR i from:0 to:(LEN devicesArray-1) {
		SET deviceName: (devicesArray[i]["id"])

		INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:deviceClassId objectName:deviceName newObjId:deviceId

		SET_SPECIFICATIONS objID: (STR deviceId) specs: (specifications)

		CC "Core" GET_ATTR_ID classid:(deviceClassId) attrname:("specification")
		CC "Core" GET_REC_ATTR_ROW_ID objid:(deviceId) attrid:(attrid) index:1

		FOR h from:0 to:(LEN deviceGroupsArray-1) {
			SETL id:(deviceGroupsArray[h] SUB "displayName")	# COULD BE NOT ACCURATE ENOUGH searching by displayName, could be empty at the end
			SETL x:(search(id, deviceName, 0))		
			# if we found the device group id with the same name as the device assign the device group id to the "device" object 
			IF ( x != -1 ) {
				SETL deviceGroupId:(deviceGroupsArray[h] SUB "id")
				CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(deviceGroupId)
			}
		}

		CC "Modeling" SET_OBJ_POS objid:(deviceId) x:(objPosX) y:(objPosY)

		# the equivalent of "FOR <deviceTemplate> in <deviceTemplatesArray>"
		FOR j from:0 to:(LEN deviceTemplatesArray-1) {
			SETL capabilityModel: (deviceTemplatesArray[j]["capabilityModel"]) # cause attribute "displayName" isn't reliable
			SETL deviceTemplateId: (capabilityModel["@id"])
			SETL x:(search(deviceTemplateId, deviceName, 0))		
			# if we found the device template with the same name as the device
			IF ( x != -1 ) {
				SETL deviceTemplateName:(deviceName)	# id is the same as the device id
				SETL capabilities:(capabilityModel["contents"])

				# centrate the "device" and create new line for "attribute" & "Device Operation" objects
				# questa la chiamo meravigghia
				IF(LEN capabilities = 1) {
					CC "Modeling" SET_OBJ_POS objid:(deviceId) x:(objPosX) y:(objPosY)
					SETL objPosY:(objPosY+5cm)
				} ELSE {
					CC "Modeling" SET_OBJ_POS objid:(deviceId) x:(CM(((LEN capabilities-1)/2)*5) + 2cm) y:(objPosY)
					SETL objPosY:(objPosY+5cm)
				}

				FOR k from:0 to:(LEN capabilities-1) {
					SETL capabilityName:(capabilities[k]["name"])
					SETL type:(capabilities[k]["@type"])

					# IF WE HAVE A COMMAND "@type": "Command",
					IF(type(type) = "string") {

						INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:deviceOperationClassId objectName:capabilityName newObjId:deviceOperationId

						# check if there's a description
						IF(type(capabilities[k]["description"]) = "string") {
							CC "Core" SET_ATTR_VAL objid:(deviceOperationId) attrname:("description") val:(capabilities[k]["description"])
						}

						# then beautify new object position
						CC "Modeling" SET_OBJ_POS objid:(deviceOperationId) x:(objPosX) y:(objPosY)
						SETL objPosX:(objPosX+5cm)
            			CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(deviceId) toobjid:(deviceOperationId) classid:(hasOperationClassId)

					# IF WE HAVE A TELEMETRY "@type": ["Telemetry","<capabilitySemanticType>","NumberValue"]
					} ELSIF(type(type) = "array") {
						
						# OR IF WE HAVE A PROPERTY "@type": ["Property","Location"]
						SETL x:(search("Location", type[1], 0))	
						IF(x!=-1) {
							INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:locationClassId objectName:capabilityName newObjId:locationId
							# check if there's a description, if we have it, assign it to the new service object
							IF(type(capabilities[k]["description"]) = "string") {
								CC "Core" SET_ATTR_VAL objid:(locationId) attrname:("description") val:(capabilities[k]["description"])
							}
							CC "Modeling" SET_OBJ_POS objid:(locationId) x:(objPosX) y:(objPosY)
							SETL objPosX:(objPosX+5cm)
							CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(deviceId) toobjid:(locationId) classid:(hasLocationClassId)
							NEXT
						}

						# usually the psm_type is specified in the 2nd element of the "@type" array of the REST GET
						SETL capabilitySemanticType:(type[1])
						
						INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:attributeClassId objectName:capabilityName newObjId:attributeId
						
						CC "Core" SET_ATTR_VAL objid:(attributeId) attrname:("psm_type") val:(capabilitySemanticType)
						# check if there's a description
						IF(type(capabilities[k]["description"]) = "string") {
							CC "Core" SET_ATTR_VAL objid:(attributeId) attrname:("description") val:(capabilities[k]["description"])
						}
						SET_SPECIFICATIONS objID: (STR attributeId) specs: (specifications)

						FILL_SPECIFICATION_BY_PSM_TYPE type:capabilitySemanticType objID:attributeId modelID:a_dstmodelid

						# as the device template export from ADOxx are structured the json response has the "unit" parameter and
						# only if is specified there's also a parameter "maxValue" (take a look at PSM_TO_FILE>Azure procedure)

						CC "Core" GET_ATTR_ID classid:(attributeClassId) attrname:("specification")
						CC "Core" GET_REC_ATTR_ROW_ID objid:(attributeId) attrid:(attrid) index:1
						SETL unit:(capabilities[k]["unit"])
						IF (type(capabilities[k]["maxValue"]) != "undefined") {
							SETL maxValue:(capabilities[k]["maxValue"])
							CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(maxValue)
						} ELSE {
							CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(unit)
						}

						CC "Modeling" SET_OBJ_POS objid:(attributeId) x:(objPosX) y:(objPosY)
						SETL objPosX:(objPosX+5cm)
						CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(deviceId) toobjid:(attributeId) classid:(hasAttributeClassId)
					}
				}
			}
		}
		SETL objPosX:(2cm)
		SETL objPosY:(objPosY+10cm)
	}

	# the equivalent of "FOR <dashboard> in <dashboardsArray>"
	FOR i from:0 to:(LEN dashboardsArray-1) 
	{
		SETL tiles:(dashboardsArray[i]["tiles"])
		FOR j from:0 to:(LEN tiles-1) 
		{
			SETL widgetName:(tiles[j]["displayName"])
			SETL configuration:(tiles[j]["configuration"])
			IF(type(configuration["capabilities"]) = "undefined") {
				NEXT
			}

			SETL widgetType:(configuration["type"])
			IF(widgetType = "lineChart") {
				SETL widgetType:"Line Chart"
			} ELSIF(widgetType = "lkv") {
				SETL widgetType:"Last Known Value (lkv)"
			} ELSIF(widgetType = "mapProperty") {
				SETL widgetType:"Map (property)"
			}

			SETL widgetsAttachedTo:(configuration["capabilities"])

			# if there are no capabilities linked to the dashboard but only a device create the "widget" object next to the "device" object
			# weird stuff: tried before to do something like that and it worked, but the Azure's documentation says:
			#	 "You need to have at least one device template in your application to be able to add tiles that show device information" 
			# ...? maybe delete useless things (devHasWidg ecc...) in future
			IF(configuration["capabilities"].length = 0) {
				SETL devArr:(configuration["devices"])
				SETL deviceAttachedTo:(devArr[0])

				SETL newWidgetName:(deviceAttachedTo + " - widget")
				# get the "device" object coordinate and set new "widget" object position next to it
				CC "Core" GET_OBJ_ID modelid:(a_dstmodelid) classid:(deviceClassId) objname:(deviceAttachedTo)
				CREATE_WIDGET objid:(objid) classid:(deviceClassId) newName:(newWidgetName) modelid:(a_dstmodelid) relationClassId:(devHasWidgetClassId)
			} ELSE {
				# else, link the new "widget" objects underneath the "attribute" or "location" objects
				IF(widgetType="Map (property)") {
					SETL targetDeviceName:(configuration["devices"][0])
					SET targetDeviceId:0
					# VERY ugly code
					CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_dstmodelid) classname:"device"
					FOR device in:(objids) {
 						CC "Core" GET_ATTR_VAL objid:(VAL device) attrname:("name")
						IF(val=targetDeviceName) {
							SET targetDeviceId:(VAL device)
							NEXT 
						}
					}
					# maybe there's a way to understand if a connector is a relation class (ex: "hasLocation") it will be usefull (classid & classname will be skipped)
		            CC "Core" GET_CONNECTORS objid:(targetDeviceId) out
	                FOR connector in:(objids) {
						CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connector)
						CC "Core" GET_CLASS_ID objid:(toobjid)
						CC "Core" GET_CLASS_NAME classid:(classid)
						IF(classname="location") {
							SETL newWidgetName:(widgetName + " - locationProperty")
							CREATE_WIDGET objid:(toobjid) classid:(locationClassId) newName:(newWidgetName) modelid:(a_dstmodelid) relationClassId:(hasWidgetClassId)
							NEXT
						}
					}
				} ELSE {

					SETL capabilitiesArray:(configuration["capabilities"])
					FOR k from:0 to:(LEN capabilitiesArray-1) {

						SETL capability:(capabilitiesArray[k])
						SETL attributeObjectName:(capability["capability"])

						# get the "attribute" object coordinate and set new "widget" object position at the bottom
						# todo dio mio accomedare per carita
						SET targetAttributeId:-1
						CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(a_dstmodelid) classname:"attribute"
						FOR attribute in:(objids) {
 							CC "Core" GET_ATTR_VAL objid:(VAL attribute) attrname:("name")
							IF(val=attributeObjectName) {
								SET targetAttributeId:(VAL attribute)
								NEXT 
							}
						}
						# CC "Core" GET_OBJ_ID modelid:(a_dstmodelid) classid:(attributeClassId) objname:(attributeObjectName) TODO in future: sorry but this doesn't work sometimes...
						# SETL attrObjId:(objid)
						IF(targetAttributeId=-1) {
							NEXT
						}
						SETL newWidgetName:(attributeObjectName + " - "+ widgetType)
						CREATE_WIDGET objid:(targetAttributeId) classid:(attributeClassId) newName:(newWidgetName) modelid:(a_dstmodelid) relationClassId:(hasWidgetClassId)
					}
				}
			}
		}
	}
	CC "Core" SAVE_MODEL modelid:(a_dstmodelid)
}

# Extract the parent object position and link new widget to underneath it 
# PS: can't do this on the widgets directly linked to the main device 
PROCEDURE global CREATE_WIDGET
objid: integer
classid:integer
newName:string
modelid:integer
relationClassId:integer
{
	SETL parentObject:(objid)
	CC "Core" GET_ATTR_ID classid:(classid) attrname:"Position"
	CC "Core" GET_ATTR_VAL objid:(parentObject) attrid:(attrid)

    LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
	IF(relationClassId=hasWidgetClassId) {
    	SET y:(y + 5cm)
	} ELSIF(relationClassId=devHasWidgetClassId) {
    	SET x:(x + 5cm)
	} ELSE {
		CC "AdoScript" ERRORBOX("Wrong relation class id passed on potentially new object: "+newName)
	}
					
	INITIALIZE_NEW_OBJECT modelid:modelid classid:widgetClassId objectName:newName newObjId:widget

	CC "Core" SET_ATTR_VAL objid:(widget) attrname:("psm_type") val:(widgetType)
	SET_SPECIFICATIONS objID: (STR widget) specs: (specifications)

    CC "Modeling" SET_OBJ_POS objid:(widget) x:(x) y:(y)
	CC "Core" CREATE_CONNECTOR modelid:(modelid) fromobjid:(parentObject) toobjid:(widget) classid:(relationClassId)
}

# TODO: evolve this procedure in future if we need to use parameters
# tip: take a look at "Export.asc", this procedure is inspired by the GET_ENDPOINT procedure inside that .asc file
PROCEDURE global GET_AZURE_OBJECTS
objectFromJsonStructure: string
method: string
objectsArray:reference
{
	GET_SPECIFICATIONS platform: ("Azure") specs: specs
	SETL fillUrl: ( ( ( (specs SUB objectFromJsonStructure) SUB "api") SUB method) SUB "path")

	SETL url: ("https://"+applicationSubdomain+".azureiotcentral.com/"+fillUrl)
	HTTP_SEND_REQUEST(url) str_method:("GET") map_reqheaders:(headers) str_reqbody:("") val_respcode:respstat map_respheaders:respheaders str_respbody:str_respbody
	SETL mapRespBody: (fromJson(str_respbody))
	SETL objectsArray:(mapRespBody["value"])

	# Check if application name is correct, if it's not exit 
	IF(type(mapRespBody["error"]) != "undefined") {
		CC "AdoScript" WARNINGBOX("Application subdomain not valid.\n\n" + mapRespBody)
		SETG subdomainNotValid:1
		EXIT
	}
}

# Create new object and set new name (and Name) value
PROCEDURE global INITIALIZE_NEW_OBJECT 
modelid:reference
classid:reference
objectName:reference
newObjId:reference
{
	CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(classid)
	SETL newObjId:(objid)
	CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("name") val:(objectName)
	CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("Name") val:(objectName)
}

# Call this procedure once to avoid repeating n times the GET_CLASS_ID command call
PROCEDURE global EXTRACT_CLASSIDS 
{
	# Classes
	CC "Core" GET_CLASS_ID classname:("device")
	SETG deviceClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("attribute")
	SETG attributeClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("Device Operation")
	SETG deviceOperationClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("widget")
	SETG widgetClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("location")
	SETG locationClassId:(classid)

	# Relation classes
	CC "Core" GET_CLASS_ID classname:("hasAttribute")
	SETG hasAttributeClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("hasOperation")
	SETG hasOperationClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("hasWidget")
	SETG hasWidgetClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("hasLocation")
	SETG hasLocationClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("devHasWidget")
	SETG devHasWidgetClassId:(classid)
}

# procedure extracted by PSM_TYPES.asc file
# 
# 	1. Get the psm_type by the "attribute" object
#	2. manually select the psm_type by the value passed from the GET http 
# 	3. by selecting the psm_type this procedure fills "specification" table
PROCEDURE global FILL_SPECIFICATION_BY_PSM_TYPE
type:reference
objID:reference
modelID:reference
{
	CC "Core" GET_CLASS_ID objid:(objID)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" SET_ATTR_VAL objid:(objID) attrname:"psm_type" val:(type)
	
	SET class:(specs[classname][0][type])
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")

    IF (attrid != -1 AND type(class["specs"]) = "map") {
        SET attrs:(mapKeysArray(class["specs"]))
        CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objID) attrid:(attrid)
        FOR r in:(rowids) {
            CC "Core" REMOVE_REC_ROW objid:(objID) attrid:(attrid) rowid:(VAL r)
        }
        FOR j from:0 to:(attrs.length-1) {
            # Add attribute to specification table
            SET attrClass:(class["specs"][attrs[j]])
            CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(attrs[j])
            IF (type(attrClass) = "map") {
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(attrClass["type"])
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(attrClass["description"])
            }
            IF ((ecode)!=0) {
                CC "AdoScript" ERRORBOX ("Error adding a row to attribute \""+(attrs[j])+"\"")
                EXIT
            }
        }
   	}
}

 