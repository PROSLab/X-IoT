# This script does:
# - translate a Feature Model ( with its relative Feature Operation Model ) from PIM to PSM
# - import a feature model PSM from internet
# - ...

PROCEDURE global IMPORT_FEATURE_PSM
{
    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    IF (modelID = -1) { #no model open
        CC "AdoScript" INFOBOX ("Select a PIM model to proceed.")
        EXIT
    }

   
    #importazione json manuale

    #CC "AdoScript" FILE_DIALOG open
    ##  filter1:"JSON Files" type1:"*.json" default-ext:"json"
    #CC "AdoScript" INFOBOX ("You selected " + path)
    # Read JSON file from pc
    #  CC "AdoScript" FREAD file:(path)
    # IF (ecode != 0) {
    #     CC "AdoScript" ERRORBOX ("The file is not readable!") ok
    #     EXIT
    # }
   
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelID) classname:("Feature")
    CC "Core" GET_OBJ_NAME objid:(VAL token (objids, 0, " "))

    # CC "AdoScript" INFOBOX ((objname))
    SETL name_cutted: (replall(objname, " ", ""))

    #  CC "AdoScript" INFOBOX ( (name_cutted))
    SETL respbody: ("")
    SETG name_cutted2:(name_cutted)

    HTTP_SEND_REQUEST("http://pedvalar.webs.upv.es/microservices/system/"+name_cutted2+"/floware/psm") str_method:("GET") map_reqheaders:(map()) str_reqbody:("") val_respcode:respstat map_respheaders:respheaders str_respbody:respbody

    SET mapRespBody: (fromJson(respbody))
    SET names_psm: ("")

    FOR i from:0 to: (LEN mapRespBody-1) {
        IF (i=0) {
            SET names_psm: (mapRespBody[i])
        }
        ELSE { 
            SET names_psm: (names_psm+","+mapRespBody[i])
        }
    }

    CC "AdoScript" MLISTBOX entries:(names_psm) toksep:"," title:"Choose the PSM type" 
    IF (endbutton != "ok") {
        EXIT
    }
    SET type:(selection)
    #CC "AdoScript" INFOBOX (selection)

    FOR vara in:(selection) sep:"," {    
    #  CC "AdoScript" INFOBOX (name_cutted)
    HTTP_SEND_REQUEST("http://pedvalar.webs.upv.es/microservices/system/"+name_cutted+"/floware/psm/"+ vara) str_method:("GET") map_reqheaders:(map()) str_reqbody:("") val_respcode:respstat map_respheaders:respheaders str_respbody:respbody

	SETG vara2:(vara)
    CC "AdoScript" INFOBOX ("PSM name:" +vara2)

    CC "Core" SET_ATTR_VAL objid:(modelID) attrname:("PSMID") val:vara2

    # CC "AdoScript" INFOBOX ((objname))
    # quello che sta dentro il file 
    # lo converto in json
    SETL fileJson:(fromJson(respbody))
    # CC "AdoScript" INFOBOX (STR fileJson)

    FOR i from:0 to:(LEN fileJson-1) { # Take all the features inside the file
        #per ogni elemento prendo l'id
        SET id: (fileJson[i]["ID"])
        CC "Core" SET_ATTR_VAL objid:(VAL id) attrname:"Selection" val:(fileJson[i]["Selection"])
        CC "Core" GET_INTERREF_COUNT objid:(VAL id) attrname:("Component")
        IF (type (count) != "undefined") {
            CC "Core" GET_INTERREF objid:(VAL id) attrname:("Component") index:0
            CC "Core" LOAD_MODEL modelid:(tmodelid)
            CC "Core" SET_ATTR_VAL objid:(tobjid) attrname:"Selection" val:(fileJson[i]["Selection"])
            IF (type (fileJson[i]["Operations"]) != "undefined") {
                FOR opId in:(mapKeysList(fileJson[i]["Operations"])) sep:("~") {
                    CC "Core" SET_ATTR_VAL objid:(VAL opId) attrname:"Selection" val:(fileJson[i]["Operations"][opId]["Selection"])
                }
            }
        }  
    }

    TRANSLATE_PIM_TO_PSM

    FOR h from:0 to:(LEN fileJson-1) { # Take all the features inside the file
    # get each element's id
        SET id: (fileJson[h]["ID"])
        CC "Core" SET_ATTR_VAL objid:(VAL id) attrname:"Selection" val:("No Selected")
            
        CC "Core" GET_INTERREF_COUNT objid:(VAL id) attrname:("Component") 

        IF (type (count) != "undefined") {
            CC "Core" GET_INTERREF objid:(VAL id) attrname:("Component") index:0
            CC "Core" LOAD_MODEL modelid:(tmodelid)
            CC "Core" SET_ATTR_VAL objid:(tobjid) attrname:"Selection" val:("No Selected")
            IF (type (fileJson[h]["Operations"]) != "undefined") {
                FOR opId in:(mapKeysList(fileJson[h]["Operations"])) sep:("~") {
                    CC "Core" SET_ATTR_VAL objid:(VAL opId) attrname:"Selection" val:("No Selected")
                    }
                }
            }  
        }
    }
}

PROCEDURE global EXPORT_TO_BPMN {
    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    IF (modelID = -1) { # No model open
        CC "AdoScript" INFOBOX ("Select a model to proceed.")
        EXIT
    }

    SETL features:({})
    GENERATE_FILE modelid:(modelID) features:features
      CC "AdoScript" INFOBOX (features)
     SETL respbody: ("")
    HTTP_SEND_REQUEST("http://pedvalar.webs.upv.es/microservicesEmu/insertFloWareSystem.php") str_method:("POST") map_reqheaders:(map()) str_reqbody:(features) val_respcode:respstat map_respheaders:respheaders str_respbody:respbody
   CC "AdoScript" INFOBOX ("Response" +respbody)
}

PROCEDURE global SEND_FLOWARE_SERVER {
    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    IF (modelID = -1) { # No model open
    CC "AdoScript" INFOBOX ("Select a model to proceed.")
        EXIT
    }
    SETL features:({})
    GENERATE_FILE modelid:(modelID) features:features
    CC "AdoScript" INFOBOX (features)
    SETL respbody: ("")
    CC "AdoScript" INFOBOX (name_cutted)
    CC "AdoScript" INFOBOX (vara)
    #   CC "AdoScript" INFOBOX (featureModelPsmId)     HTTP_SEND_REQUEST("http://pedvalar.webs.upv.es/psmServer/system/" + name_cutted2 + "/psm/" + vara2 ) str_method:("POST") map_reqheaders:(map()) str_reqbody:(features) val_respcode:respstat map_respheaders:respheaders str_respbody:respbody
    CC "AdoScript" INFOBOX ("Response" +respbody)
}

### Procedure for transforming a PIM model to a PSM model
    ## 1. Create a new model
    ## 2. Get all model elements
    ## 3. Copy model elements
    ## 4. Paste elements in the new model
    ## 5. Open the new PSM model
    ## 6. Add PSM attributes
    ## 7. Save the new PSM model
PROCEDURE global TRANSLATE
modelName:string
{
    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    IF (modelID = -1) { #no model open
        CC "AdoScript" INFOBOX ("Select a model to proceed.")
        EXIT
    }
   
    ## 1.
    # Select a target model group
    CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select at least one target modelgroup"
    IF (endbutton != "ok") {
        EXIT
    }
    SETL a_mgroupids:(mgroupids)

    # Get actual model type
    CC "Core" GET_MODEL_MODELTYPE modelid:(modelID)
    SETL a_mt:(modeltype)
    SETL a_dstmodelid:0
    SETL ecode:1
 SETL a_name:(modelName)
    WHILE (ecode != 0) {
       
        CC "Core" CREATE_MODEL modeltype:(a_mt) modelname:(a_name) version:"" mgroups:(a_mgroupids)
        
        IF (ecode = 0) {
            SETL a_dstmodelid:(modelid)
        } ELSIF (ecode = 40) {
            CC "AdoScript" ERRORBOX ("A model with the same name already exists") ok
             CC "AdoScript" EDITFIELD title:"Enter PSM filename" caption:"Application ~name:" text:"Default"
    IF (ecode = 1) {
        EXIT
    }
    SETL a_name:  (text)
    SETL ecode: 1
        } ELSE {
            CC "AdoScript" ERRORBOX ("An error occured creating the new model: " + errtext) ok
        }
    }
 
    ## 2.
    # Get all objects
    CC "Core" GET_ALL_OBJS modelid:(modelID)
    SETL a_instids:(objids)

    # Get all connectors
    CC "Core" GET_ALL_CONNECTORS modelid:(modelID)
    SETL a_relinstids:(objids)

    ## 3.
    # Copy all elements
    CC "Core" CREATE_COPYBUFFER index:0
    CC "Core" FILL_COPYBUFFER index:0 instids:(a_instids) relinstids:(a_relinstids)

    ## 4.
    # Paste elements in the new model
    CC "Core" PASTE_COPYBUFFER index:0 modelid:(a_dstmodelid)
    SETL g_acreatedinstids:(instids)
    SETL g_acreatedrelinstids:(relinstids)

    # Delete buffer
    CC "Core" DELETE_COPYBUFFER index:0

    ## 5.
    # Open new model in modeling
    CC "Modeling" OPEN modelids:(STR a_dstmodelid)
    CC "Modeling" SET_VIEW_MODE modelid:(a_dstmodelid) mode-name:"PSM"
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Model Type" val:("PSM")
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Platform" val:(platform)

    ## 6.
    # Get all objects from new model
    CC "Core" GET_ALL_OBJS modelid:(a_dstmodelid)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX "Something went very wrong here (e.g. we passed the wrong model id)!\n"
        EXIT
    }

    ## 7.
    # Save and discard model
    CC "Core" SAVE_MODEL modelid:(a_dstmodelid)
    #CC "Core" DISCARD_MODEL modelid:(a_dstmodelid)
}


PROCEDURE global ADD_VALUE
objID:integer # The object id
{
    CC "Core" GET_CLASS_ID objid:(objID)
    CC "Core" GET_ATTR_VAL objid:(objID) attrname:("Service")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objID) attrid:(attrid)
    FOR r in:(rowids) {
        CC "Core" REMOVE_REC_ROW objid:(objID) attrid:(attrid) rowid:(VAL r)
    }
    IF ( val = "MQTT" ) {
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Server Broker")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Topic")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("QoS")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Port")
    }
    IF ( val = "HTTP" ) {
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Address")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Port")
        CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:("Method")
    }
}

### Procedure to generate the operation's PSM file from the original PIM
## 1. Select the original PIM inside the current model
## 2. Inside a Device>Component there is the related operation file --> if this does not exist throw an errorbox and stop the process
## 3. If this exists, open and select the operation file
## 4. Generate the PSM using the operation file as parameter (we only need to select the model)
PROCEDURE global TRANSLATE_PIM_TO_PSM
{
    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    #no model open
    IF (modelID = -1) {
        CC "AdoScript" INFOBOX ("Select a model to proceed.")
        EXIT
    }
    CC "Core" GET_ATTR_VAL objid:(modelid) attrname:("Name")
    SETL newName:(val)
    TRANSLATE modelName:(newName + " - PSM")
    
    # if this is a Feature Operation Model it's wrong to generate the PSM of the operations' file (you'll do twice the same instruction...)
    CC "Modeling" GET_ACT_MODEL
    CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)
    IF (modeltype = "Feature Operation Model") {
        EXIT
    }

    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"Device"
    SET dev:(token(objids, 0, " "))

    # check if we have at least one device...
    IF (dev = "") {
        CC "AdoScript" ERRORBOX ("Can't genereate PSM's devices operations: There are no devices in this model")
        EXIT
    }

    SETL firstPsmModel:(modelid)

    # ...and redirect to the devices operations' file inside Device>Component
    CC "Core" GET_ATTR_VAL objid:(VAL dev) attrname:("Component")
    IF (val="") {
        CC "AdoScript" ERRORBOX ("The operation file of this model cannot be found")
    } ELSE {
        CC "Core" GET_INTERREF objid:(VAL dev) attrname:("Component") # extract the devices operations' model
        SETL operationPimModel:(tmodelid)
        
        # remove Feature Model PSM model's interrefs
        FOR device in:(objids)
        {
            CC "Core" GET_CLASS_ID classname:("Device")
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("Component")
            CC "Core" REMOVE_ALL_INTERREFS objid:(VAL device) attrid:(attrid)
        }

        # open operation model to translate to PSM
        CC "Modeling" OPEN modelids:(STR operationPimModel)
        IF (ecode != 0) {
            CC "AdoScript" ERRORBOX("Devices operations model couldn't be loaded")
            EXIT
        }
        TRANSLATE modelName:(newName + " - Device view - PSM")

        CC "AdoScript" WARNINGBOX ("Please ensure that devices in the Feature Model has the same name of the devices in the Feature Operation Model.\nIt may cause malfunctionalities")

        CC "Modeling" GET_ACT_MODEL
        SETL secondPsmModel:(modelid)

        CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(modelid) classname:"Device"

        FOR deviceId in:(objids) {
            CC "Core" GET_CLASS_ID classname:("Device")

            # add Feature Model PSM model's interrefs with the PSM devops model devices
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("Component")
            CC "Core" GET_ATTR_VAL objid:(VAL deviceId) attrname:("Name")
            SETL deviceName:(val)
            CC "Core" GET_OBJ_ID modelid:(secondPsmModel) classid:(classid) objname:(deviceName) 

            # open PSM Feature Model
            CC "Modeling" OPEN modelids:(STR firstPsmModel)
            CC "Modeling" GET_ACT_MODEL

            # SEARCH BY NAME - find the device with the same name of the previous device
            # couldn't find same object in two different model by id, they're different for each model 
            CC "Core" GET_CLASS_ID classname:("Device")
            CC "Core" GET_ATTR_ID classid:(classid) attrname:("Component")
            CC "Core" GET_OBJ_ID modelid:(modelid) classid:(classid) objname:(deviceName)

            # lo metto nell interref come id -> controllare id
            CC "Core" ADD_INTERREF objid:(objid) attrid:(attrid) tobjid:(VAL deviceId)
        }
    }
}

PROCEDURE global TRANSLATE_PSM_TO_FILE
{
    # Get current model
    CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    IF (modelID = -1) { # No model open
        CC "AdoScript" INFOBOX ("Select a model to proceed.")
        EXIT
    }
    
        # Select the path to save files
    CC "AdoScript" DIRECTORY_DIALOG
    IF (endbutton != "ok") {
        EXIT
    }
# Set application name
    CC "AdoScript" EDITFIELD title:"Enter application name" caption:"Application ~name:" text:"Default"
    IF (ecode = 1) {
        EXIT
    }
    SET path:(path + "\\" + text + ".json")
    SETL features:({})
    GENERATE_FILE modelid:(modelID) features:features
    CC "AdoScript" FWRITE file:(path) text:(features)
}



PROCEDURE global GENERATE_FILE
modelid:integer
features:reference
{
    SETL objs:(map())

    CC "Core" GET_ATTR_VAL objid:(modelid) attrname:("Model Type")
    SETL modeltypeFM: (val)
    # SETL array named features

    TAKE_FEATURE_MODEL model:(modelid) features:objs


    FOR obj in:(mapKeysList(objs)) sep:("~") {
        SETL feature:(map())
        TAKE_COMPONENT obj:(obj) typeFM:(modeltypeFM) feature:feature            
        SETL n:(aappend(features, feature))
    }
    SETL features:(lam_toJson(features))
}


PROCEDURE global TAKE_COMPONENT
obj:string
typeFM:string
feature:reference
{
    # Get all attributes of the selected class
    CC "Core" GET_CLASS_ID objid:(VAL obj)
    SETL objClass:(classid)
    CC "Core" GET_ALL_NB_ATTRS classid:(objClass)
    SETL allattrnames:({})
    FOR id in:(attrids) {
        CC "Core" GET_ATTR_NAME attrid:(VAL id)
        IF (typeFM = "PSM" AND (attrname = "Name" OR attrname = "specification" OR attrname = "Data Type" OR attrname = "Service" OR attrname = "Description" OR attrname = "Selection" OR attrname = "Device type" OR attrname = "Component" OR attrname = "Operations" OR attrname = "Operation Name" )) {
            SETL n:(aappend(allattrnames, attrname))
        } 
        
        ELSIF (typeFM = "PIM" AND (attrname = "Name" OR attrname = "Description" OR attrname = "Component" OR attrname = "Device type" OR attrname = "Operations" OR attrname = "Operation Name")) {
            SETL n:(aappend(allattrnames, attrname))
         
        }
                 # CC "AdoScript" INFOBOX (type)
    }
    
    SETL feature:(map()) # SETL feature object
    FOR i from:0 to:(allattrnames.length-1) { # Take all the names
        SETL attr:(allattrnames[i])
       

        IF ( attr = "specification" ) {
            SETL specs:(map())
            CC "Core" GET_ATTR_ID classid:(objClass) attrname:("specification")
            CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(VAL obj) attrid:(attrid)

            # Get specification attributes
            FOR row in:(rowids) {
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Attribute")
                SETL key:(val)
                CC "Core" GET_ATTR_VAL objid:(VAL row) attrname:("Value")
                SETL specs[key]:(val)
            }
            SETL feature["specification"]:(specs)
        } ELSIF ( attr = "Component" ) {
            CC "Core" GET_INTERREF objid:(VAL obj) attrname:("Component") index:0
            IF ( type(tmodelid) != "undefined" ) {
                SETL operations:(map())
                CC "Core" LOAD_MODEL modelid:(tmodelid)
                CC "Core" GET_INTERREF objid:(VAL obj) attrname:("Component") index:0
                CC "Core" GET_CONNECTORS objid:(tobjid) out
            
        
                FOR connectorId in:(objids) sep:(" ") {
                    SETL operation:(map())
                    CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL connectorId)
                    TAKE_COMPONENT obj:(STR toobjid) typeFM:(typeFM) feature:operation
                    SETL operation["Parent"]:(obj)
                 
                    SETL operations[STR toobjid]:(operation)
                }
                SETL feature["Operations"]:(operations)
            }
        } ELSIF ( attr != "Operations" ) {
            CC "Core" GET_ATTR_VAL objid:(VAL obj) attrname:(allattrnames[i]) # Take for each object the attribute value
            SETL feature[allattrnames[i]]:(val) # SETL the attribute value inside the object 
        }
    }

     CC "Core" GET_CONNECTORS objid:(VAL obj) in
  
        FOR id in:(objids) {
            CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL id)
            SETL fromobjid:(STR fromobjid)
            CC "Core" GET_CLASS_ID objid:(VAL id)
            CC "Core" GET_CLASS_NAME classid:(classid)
            SETL connname:(classname)
        #CC "AdoScript" INFOBOX ("to Obj id" + STR fromobjid + STR toobjid)
        }
    
    CC "Core" GET_CLASS_NAME classid:(objClass)
    SETL feature["Type"]:(classname)
    SETL feature["ID"]:(obj)
    SETL feature["Parent"]:(fromobjid)
     SETL feature["Relation"]:(connname)
}


PROCEDURE global TAKE_FEATURE_MODEL
model:integer
features:reference
{
    CC "Core" LOAD_MODEL modelid:(model)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(model) classname:("Feature")
    FOR obj in:(objids) {
        SETL features[obj]:1
    }
}


PROCEDURE global WITH_RELATIONS {
     CC "Modeling" GET_ACT_MODEL
    SETL modelID:(modelid)
    IF (modelID = -1) { #no model open
        CC "AdoScript" INFOBOX ("Select a PIM model to proceed.")
        EXIT
    }

    CC "Core" GET_ALL_OBJS modelid:(modelid)
    IF (ecode != 0)
    {  
         CC "AdoScript" ERRORBOX "Something went very wrong here (e.g. we passed the wrong model id)!\n"   EXIT
    }

}